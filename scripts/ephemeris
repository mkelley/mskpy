#!/usr/bin/python3
import sys
import argparse
import datetime
import numpy as np
import astropy.units as u
import mskpy
from mskpy import ephem, util, between, Coma, Asteroid, HYmag

today = datetime.date.today()

class ListAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        v = [float(x) for x in values.split(',')]
        setattr(namespace, self.dest, v)

parser = argparse.ArgumentParser(description='Generate an ephemeris.')
parser.add_argument('target', type=str, action='store', nargs='*',
                    help='The name of the target')

parser.add_argument('--start', type=str, action='store',
                    default=today.isoformat(),
                    help='The first day of the ephemeris, YYYY-MM-DD [today].')
parser.add_argument('--end', type=str, action='store', default=None,
                    help='The last day of the ephemeris, YYYY-MM-DD [today + n].')
parser.add_argument('-n', type=int, action='store', default=None,
                    help='The number of days for the ephemeris, or, if --end is provided, the number of time steps.')

parser.add_argument('--include', type=str, default=None,
                    help='List additional columns to include, e.g., lelong (Lunar elongation), lam (Ecliptic longitude), bet (Ecliptic latitude), sangle (projected Sun angle), vangle (projected velocity angle).')

parser.add_argument('--observer', type=str, action='store', default='Earth',
                    help='The observer.  Default: Earth.')
parser.add_argument('--selong', type=str, action=ListAction, default=[0, 180],
                    help='The allowed solar elongation limits. Default: 0,180.')

parser.add_argument('--kernel', type=str, action='append', default=[],
                    help='Load this kernel.')

parser.add_argument('-M', type=float, action='store', default=None,
                    help='Comet absolute total magnitude (rh=Delta=1 au, phase=0 deg).')
parser.add_argument('-K', type=float, action='store', default=4.0,
                    help='Heliocentric distance magnitude slope. Default: 10..')

parser.add_argument('-H', type=float, action='store', default=None,
                    help='Absolute asteroidal/nuclear magnitude (rh=Delta=1 au, phase=0 deg).')
parser.add_argument('--beta', type=float, action='store', default=0.04,
                    help='Asteroidal/nuclear phase coefficient.  Default: 0.04 mag/deg.')

parser.add_argument('--afrho', type=float, action='store', default=None,
                    help='Afrho parameter at phase angle = 0 [cm].')
parser.add_argument('-k', type=float, action='store', default=-2.0,
                    help='Afrho heliocentric distance power-law slope.  Default: -2.')
parser.add_argument('--rh', type=float, action='store', default=1.0,
                    help='Afrho parameter specified at this rh [AU].  Default: 1.')
parser.add_argument('--ef2af', type=float, action='store', default=3.5,
                    help='The ratio of IR emissivity to albedo.  Default: 3.5.')
parser.add_argument('--tscale', type=float, action='store', default=1.1,
                    help='Effective temperature scale factor. Default: 1.1.')
parser.add_argument('--phasef', type=str, action='store', default='phaseHM',
                    help='Phase function: phaseK, phaseH, phaseHM.  Default: phaseHM.')

parser.add_argument('-D', type=float, action='store', default=None,
                    help='Asteroid diameter [km].')
parser.add_argument('--eta', type=float, action='store', default=1.0,
                    help='IR-beaming parameter.  Default: 1.')
parser.add_argument('--Ap', type=float, action='store', default=0.04,
                    help='Asteroid/nucleus geometric albedo.  Default: 0.04.')

parser.add_argument('--wave', type=str, action=ListAction,
                    default=[0.6, 2.2, 10, 20],
                    help='Wavelengths for estimate flux densities.  Default: 0.6,2.2,10,20.')
parser.add_argument('--rap', type=float, action='store', default=1.0,
                    help='Aperture radius [arcsec].  Default: 1.')
parser.add_argument('--unit', type=str, action='store', default='Jy',
                    help='Flux density unit.  Default: Jy')

args = parser.parse_args()
if args.target == []:
    parser.print_help()
    print()
    sys.exit()

eph_opts = {}
if args.end is None:
    ymd = [int(x) for x in args.start.split('-')]
    start = datetime.date(*ymd).toordinal()
    n = 31 if args.n is None else args.n + 1
    end = datetime.date.fromordinal(start + n - 1).isoformat()
else:
    end = args.end
    if args.n is None:
        n = int(util.cal2time(end).jd - util.cal2time(args.start).jd + 1)
    else:
        n = args.n + 1

eph_opts['num'] = n

if len(args.kernel) > 0:
    for k in args.kernel:
        ephem.core.load_kernel(k)

if (len(args.target) == 1
    and args.target[0].isdigit()
    and len(args.target[0]) < 6):
    # asteroid designation
    target = ephem.getspiceobj(int(args.target[0]) + 2000000)
else:
    target = ephem.getspiceobj(' '.join(args.target))

try:
    observer = eval('ephem.' + args.observer.capitalize())
except AttributeError:
    observer = ephem.getspiceobj(' '.join(args.observer))

ephemeris_only = False
test = [x is not None for x in (args.afrho, args.D, args.M)]
if not any(test):
    # no brightness estimate requested
    ephemeris_only = True
else:
    # make sure only one brightness estimate was requested
    assert sum(test) == 1, "Only one of M, afrho, or D may be requested at a time."

columns = ['date', 'ra', 'dec', 'rh', 'delta', 'phase', 'selong']
if args.include is not None:
    columns.extend(args.include.split(','))
    
arg_list = ['start', 'end', 'n', 'observer', 'selong']
if ephemeris_only or args.M is not None or args.N is not None:
    t = target.ephemeris(observer, [args.start, end], num=n,
                         columns=columns)
    if args.M is not None:
        arg_list.extend(['M', 'K'])
        t['mT'] = HYmag(args.M, args.K, t)
        t['mT'].format = '{:.2f}'
        t['mT'].unit = 'mag'

    if args.H is not None:
        if args.M is not None:
            # call it mN for comet nuclear mag
            k = 'mN'
        else:
            k = 'm'
            
        arg_list.append('H')
        arg_list.append('beta')
        t[k] = HYmag(args.H, 5, t) + 2.5 * np.log10(args.beta * t['phase'].data)
        t[k].format = '{:.2f}'
        t[k].unit = 'mag'
            
elif args.afrho is not None:
    arg_list.extend(['afrho', 'k', 'rh', 'ef2af', 'tscale', 'phasef',
                     'wave', 'rap', 'unit'])
    afrho1 = args.afrho / args.rh**args.k * u.cm
    coma = Coma(target.state, afrho1, k=args.k,
                ef2af=args.ef2af, Tscale=args.tscale,
                phasef=getattr(mskpy.models, args.phasef))
    t = coma.lightcurve(observer, [args.start, end], args.wave * u.um,
                        num=n, rap=args.rap * u.arcsec,
                        unit=u.Unit(args.unit), verbose=False)
elif args.D is not None: 
    arg_list.extend(['D', 'Ap', 'eta', 'wave', 'unit'])
    asteroid = Asteroid(target.state, args.D * u.km, args.Ap, eta=args.eta)
    t = asteroid.lightcurve(observer, [args.start, end], args.wave * u.um,
                            num=n, unit=u.Unit(args.unit), verbose=False)

            

t = t[between(t['selong'], args.selong)]

print("""# ephemeris {}
#
# target = {}
#""".format(' '.join(sys.argv[1:]), ' '.join(args.target)))
for k in arg_list:
    if k[0] == '_':
        continue

    print("# {} = {}".format(k, getattr(args, k)))

print("#")
t.pprint(max_width=-1, max_lines=-1)

